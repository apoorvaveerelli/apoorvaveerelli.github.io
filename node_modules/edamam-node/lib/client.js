"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
const got_1 = require("got");
class EdamamClient {
    constructor(params) {
        this.appId = params.appId;
        this.appKey = params.appKey;
        this.baseUrl = params.baseUrl || "https://api.edamam.com";
    }
    searchRecipesByQuery(q, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.searchRecipes("q", q, options);
        });
    }
    searchRecipesById(r, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.searchRecipes("r", r, options);
        });
    }
    searchRecipes(key, value, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const opts = options || {};
            const { nutrients, excluded } = opts, rest = __rest(opts, ["nutrients", "excluded"]);
            const optionsParams = buildObjString(sanitiseObject(Object.assign({}, rest, { app_id: this.appId, app_key: this.appKey, [key]: value })));
            const nutrientsParams = buildMapString("nutrients", nutrients || new Map());
            const excludedParams = buildArrayString("excluded", excluded || []);
            const queryParams = [optionsParams, nutrientsParams, excludedParams]
                .filter((item) => item)
                .join("&");
            const response = yield got_1.get(encodeURI(`${this.baseUrl}/search?${queryParams}`), {
                json: true,
            });
            return response.body;
        });
    }
}
exports.EdamamClient = EdamamClient;
function sanitiseObject(obj) {
    const clone = Object.assign({}, obj);
    Object.keys(clone).forEach((key) => clone[key] === undefined && delete clone[key]);
    return clone;
}
function buildMapString(param, map) {
    return [...map.entries()]
        .map(([key, val]) => `${param}[${key}]=${val}`)
        .join("&");
}
function buildArrayString(param, arr) {
    return arr
        .map((val) => `${param}=${val}`)
        .join("&");
}
function buildObjString(obj) {
    return Object.entries(obj)
        .map(([key, val]) => `${key}=${val}`)
        .join("&");
}
